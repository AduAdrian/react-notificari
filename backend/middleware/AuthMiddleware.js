const jwt = require('jsonwebtoken');
const fs = require('fs');

// Generated by Copilot - OWASP compliant Auth Middleware

class AuthMiddleware {
    constructor() {
        this.JWT_SECRET = process.env.JWT_SECRET || 'ca37cc84426514b08923818813192c3cb84a8a16';
        this.failedAttempts = new Map(); // Email -> { count, lastAttempt, lockoutUntil }
        this.MAX_FAILED_ATTEMPTS = 5;
        this.LOCKOUT_BASE_TIME = 60 * 1000; // 1 minut
        this.LOCKOUT_MAX_TIME = 24 * 60 * 60 * 1000; // 24 ore
    }

    /**
     * Verifică dacă user este admin și poate accesa CPanel
     * @param {Object} req - Express request object
     * @param {Object} res - Express response object  
     * @param {Function} next - Express next function
     */
    static requireAdmin(req, res, next) {
        try {
            const authHeader = req.headers.authorization;

            if (!authHeader || !authHeader.startsWith('Bearer ')) {
                SecurityLogger.logRoleAccess(null, 'unknown', req.path, false, req.ip);
                return res.status(401).json({
                    error: 'Token de autentificare lipsa. Acces interzis.'
                });
            }

            const token = authHeader.split(' ')[1];

            if (!token) {
                return res.status(401).json({
                    error: 'Format token invalid.'
                });
            }

            const decoded = jwt.verify(token, process.env.JWT_SECRET || 'ca37cc84426514b08923818813192c3cb84a8a16');

            // Verifică rolul admin
            if (decoded.role !== 'admin') {
                SecurityLogger.logRoleAccess(decoded.userId, decoded.role, req.path, false, req.ip);
                return res.status(403).json({
                    error: 'Acces interzis. Doar administratorii pot accesa CPanel-ul.',
                    redirectTo: decoded.role === 'client' ? '/client/schedule-menu' : '/login'
                });
            }

            // Log successful admin access
            SecurityLogger.logRoleAccess(decoded.userId, 'admin', req.path, true, req.ip);

            req.user = decoded;
            req.adminAccess = true;
            next();

        } catch (error) {
            SecurityLogger.logSuspiciousActivity(null, 'INVALID_ADMIN_TOKEN', {
                path: req.path,
                ip: req.ip,
                error: error.message
            });

            return res.status(401).json({
                error: 'Token invalid sau expirat.'
            });
        }
    }

    /**
     * Verifică dacă user este client și poate accesa meniul de programări
     * @param {Object} req - Express request object
     * @param {Object} res - Express response object
     * @param {Function} next - Express next function
     */
    static requireClient(req, res, next) {
        try {
            const authHeader = req.headers.authorization;

            if (!authHeader || !authHeader.startsWith('Bearer ')) {
                return res.status(401).json({
                    error: 'Token de autentificare lipsa. Te rugăm să te loghezi.'
                });
            }

            const token = authHeader.split(' ')[1];
            const decoded = jwt.verify(token, process.env.JWT_SECRET || 'ca37cc84426514b08923818813192c3cb84a8a16');

            // Verifică rolul client
            if (decoded.role !== 'client') {
                SecurityLogger.logRoleAccess(decoded.userId, decoded.role, req.path, false, req.ip);
                return res.status(403).json({
                    error: 'Acces interzis. Doar clienții pot accesa meniul de programări.',
                    redirectTo: decoded.role === 'admin' ? '/admin/cpanel' : '/login'
                });
            }

            // Log successful client access
            SecurityLogger.logRoleAccess(decoded.userId, 'client', req.path, true, req.ip);

            req.user = decoded;
            req.clientAccess = true;
            next();

        } catch (error) {
            return res.status(401).json({
                error: 'Token invalid sau expirat.'
            });
        }
    }

    /**
     * Verifică dacă user poate accesa propriile date sau este admin
     * Implementează protecție IDOR (Insecure Direct Object References)
     * @param {Object} req - Express request object
     * @param {Object} res - Express response object
     * @param {Function} next - Express next function
     */
    static requireOwnershipOrAdmin(req, res, next) {
        try {
            const authHeader = req.headers.authorization;

            if (!authHeader || !authHeader.startsWith('Bearer ')) {
                return res.status(401).json({
                    error: 'Autentificare necesară.'
                });
            }

            const token = authHeader.split(' ')[1];
            const decoded = jwt.verify(token, process.env.JWT_SECRET || 'ca37cc84426514b08923818813192c3cb84a8a16');

            const requestedUserId = req.params.userId || req.body.userId || req.query.userId;

            // Admin poate accesa orice
            if (decoded.role === 'admin') {
                req.user = decoded;
                req.isOwnerOrAdmin = true;
                return next();
            }

            // Client poate accesa doar propriile date
            if (decoded.role === 'client' && decoded.userId === requestedUserId) {
                req.user = decoded;
                req.isOwnerOrAdmin = true;
                return next();
            }

            // Logează tentativa de acces neautorizat
            SecurityLogger.logSuspiciousActivity(decoded.userId, 'UNAUTHORIZED_DATA_ACCESS', {
                requestedUserId,
                userRole: decoded.role,
                path: req.path,
                ip: req.ip
            });

            return res.status(403).json({
                error: 'Nu poți accesa datele altui utilizator. Acces interzis.'
            });

        } catch (error) {
            return res.status(401).json({
                error: 'Token invalid sau expirat.'
            });
        }
    }

    /**
     * Implementează protecția împotriva brute force attacks
     * @param {string} email - Email utilizator
     * @param {string} ip - IP address
     * @returns {Object} - Status lockout
     */
    checkBruteForceProtection(email, ip) {
        const key = `${email}_${ip}`;
        const now = Date.now();

        if (!this.failedAttempts.has(key)) {
            this.failedAttempts.set(key, {
                count: 0,
                lastAttempt: now,
                lockoutUntil: 0
            });
        }

        const attempts = this.failedAttempts.get(key);

        // Verifică dacă încă este în lockout
        if (attempts.lockoutUntil > now) {
            const remainingTime = Math.ceil((attempts.lockoutUntil - now) / 1000);
            return {
                blocked: true,
                remainingTime,
                message: `Cont temporar blocat din motive de securitate. Încearcă din nou în ${remainingTime} secunde.`
            };
        }

        return { blocked: false };
    }

    /**
     * Înregistrează o încercare de autentificare eșuată
     * @param {string} email - Email utilizator
     * @param {string} ip - IP address
     */
    recordFailedAttempt(email, ip) {
        const key = `${email}_${ip}`;
        const now = Date.now();

        if (!this.failedAttempts.has(key)) {
            this.failedAttempts.set(key, {
                count: 1,
                lastAttempt: now,
                lockoutUntil: 0
            });
            return;
        }

        const attempts = this.failedAttempts.get(key);
        attempts.count += 1;
        attempts.lastAttempt = now;

        // Calculează timpul de lockout cu exponential backoff
        if (attempts.count >= this.MAX_FAILED_ATTEMPTS) {
            const lockoutTime = Math.min(
                this.LOCKOUT_BASE_TIME * Math.pow(2, attempts.count - this.MAX_FAILED_ATTEMPTS),
                this.LOCKOUT_MAX_TIME
            );

            attempts.lockoutUntil = now + lockoutTime;

            SecurityLogger.logSuspiciousActivity(email, 'BRUTE_FORCE_DETECTED', {
                attempts: attempts.count,
                ip,
                lockoutTime: lockoutTime / 1000
            });
        }

        this.failedAttempts.set(key, attempts);
    }

    /**
     * Resetează încercările eșuate pentru un utilizator
     * @param {string} email - Email utilizator  
     * @param {string} ip - IP address
     */
    resetFailedAttempts(email, ip) {
        const key = `${email}_${ip}`;
        this.failedAttempts.delete(key);
    }

    /**
     * Middleware pentru validarea input-urilor împotriva injection attacks
     * @param {Object} req - Express request object
     * @param {Object} res - Express response object
     * @param {Function} next - Express next function
     */
    static validateInput(req, res, next) {
        const suspiciousPatterns = [
            /(\<|%3C)script(\>|%3E)/gi, // XSS
            /union\s+select/gi, // SQL Injection
            /drop\s+table/gi, // SQL Injection
            /\.\.\/|\.\.%2F/gi, // Path Traversal
            /\$\{.*\}/gi, // Template Injection
            /javascript:/gi, // JavaScript protocol
            /<iframe/gi, // Iframe injection
            /on\w+\s*=/gi // Event handler injection
        ];

        const checkValue = (value, path = '') => {
            if (typeof value === 'string') {
                for (const pattern of suspiciousPatterns) {
                    if (pattern.test(value)) {
                        SecurityLogger.logSuspiciousActivity(
                            req.user?.userId || 'unknown',
                            'INJECTION_ATTEMPT',
                            {
                                pattern: pattern.toString(),
                                value: value.substring(0, 100), // Limitează lungimea log-ului
                                path,
                                ip: req.ip
                            }
                        );

                        return res.status(400).json({
                            error: 'Input invalid detectat. Te rugăm să verifici datele introduse.'
                        });
                    }
                }
            } else if (typeof value === 'object' && value !== null) {
                for (const [key, val] of Object.entries(value)) {
                    const result = checkValue(val, `${path}.${key}`);
                    if (result) return result;
                }
            }
        };

        // Verifică body, query și params
        checkValue(req.body, 'body');
        checkValue(req.query, 'query');
        checkValue(req.params, 'params');

        next();
    }
}

/**
 * Security Logger pentru monitorizarea activităților suspecte
 */
class SecurityLogger {
    static logAuthAttempt(email, success, ip, userAgent) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            type: 'AUTH_ATTEMPT',
            email,
            success,
            ip,
            userAgent,
            risk_level: success ? 'LOW' : 'MEDIUM'
        };

        console.log('SECURITY_LOG:', JSON.stringify(logEntry));

        try {
            if (!fs.existsSync('./logs')) {
                fs.mkdirSync('./logs', { recursive: true });
            }
            fs.appendFileSync('./logs/security.log', JSON.stringify(logEntry) + '\n');
        } catch (error) {
            console.error('Eroare la scrierea log-ului de securitate:', error);
        }
    }

    static logRoleAccess(userId, role, endpoint, success, ip) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            type: 'ROLE_ACCESS',
            userId,
            role,
            endpoint,
            success,
            ip,
            risk_level: success ? 'LOW' : (role !== 'admin' ? 'HIGH' : 'MEDIUM')
        };

        console.log('SECURITY_LOG:', JSON.stringify(logEntry));

        try {
            if (!fs.existsSync('./logs')) {
                fs.mkdirSync('./logs', { recursive: true });
            }
            fs.appendFileSync('./logs/security.log', JSON.stringify(logEntry) + '\n');
        } catch (error) {
            console.error('Eroare la scrierea log-ului de securitate:', error);
        }
    }

    static logSuspiciousActivity(userId, activity, details) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            type: 'SUSPICIOUS_ACTIVITY',
            userId,
            activity,
            details,
            risk_level: 'HIGH'
        };

        console.log('SECURITY_ALERT:', JSON.stringify(logEntry));

        try {
            if (!fs.existsSync('./logs')) {
                fs.mkdirSync('./logs', { recursive: true });
            }
            fs.appendFileSync('./logs/security.log', JSON.stringify(logEntry) + '\n');
        } catch (error) {
            console.error('Eroare la scrierea log-ului de securitate:', error);
        }

        // În producție, aici ar putea trimite alertă către admin
        if (process.env.NODE_ENV === 'production') {
            // TODO: Implementează alertele către admin (email/SMS)
            console.error('HIGH RISK SECURITY EVENT:', logEntry);
        }
    }
}

// Singleton instance pentru brute force protection
const authMiddleware = new AuthMiddleware();

module.exports = {
    AuthMiddleware,
    SecurityLogger,
    requireAdmin: AuthMiddleware.requireAdmin,
    requireClient: AuthMiddleware.requireClient,
    requireOwnershipOrAdmin: AuthMiddleware.requireOwnershipOrAdmin,
    validateInput: AuthMiddleware.validateInput,
    checkBruteForce: (email, ip) => authMiddleware.checkBruteForceProtection(email, ip),
    recordFailedAttempt: (email, ip) => authMiddleware.recordFailedAttempt(email, ip),
    resetFailedAttempts: (email, ip) => authMiddleware.resetFailedAttempts(email, ip)
};