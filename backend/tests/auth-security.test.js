const request = require('supertest');
const app = require('../server');
const AuthUtils = require('../utils/auth');
const fs = require('fs');

// Generated by Copilot

describe('OWASP Authentication Testing Suite (4.4)', () => {
    let adminToken, clientToken;

    beforeAll(async () => {
        // Setup test users
        adminToken = await createTestUser('admin@test.com', 'Admin123!@#', 'admin');
        clientToken = await createTestUser('client@test.com', 'Client123!@#', 'client');
    });

    afterAll(async () => {
        // Cleanup
        await cleanupTestData();
    });

    describe('4.4.1 - Credentials Transported over Encrypted Channel', () => {
        test('should enforce HTTPS in production environment', async () => {
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'production';

            // Test că aplicația nu acceptă HTTP în producție
            const response = await request(app)
                .post('/api/auth/login')
                .send({
                    email: 'test@example.com',
                    password: 'Test123!@#'
                });

            // În producție, toate request-urile trebuie să fie HTTPS
            expect(response.headers['strict-transport-security']).toBeDefined();

            process.env.NODE_ENV = originalEnv;
        });

        test('should set secure headers for authentication endpoints', async () => {
            const response = await request(app)
                .post('/api/auth/login')
                .send({
                    email: 'admin@test.com',
                    password: 'Admin123!@#'
                });

            expect(response.headers['x-content-type-options']).toBe('nosniff');
            expect(response.headers['x-frame-options']).toBe('DENY');
            expect(response.headers['x-xss-protection']).toBe('1; mode=block');
        });
    });

    describe('4.4.2 - Testing for Default Credentials', () => {
        test('should not allow login with common default credentials', async () => {
            const defaultCredentials = [
                { email: 'admin@admin.com', password: 'admin' },
                { email: 'admin@localhost', password: 'password' },
                { email: 'root@localhost', password: 'root' },
                { email: 'test@test.com', password: 'test' },
                { email: 'user@user.com', password: 'user' }
            ];

            for (const cred of defaultCredentials) {
                await request(app)
                    .post('/api/auth/login')
                    .send(cred)
                    .expect(401);
            }
        });

        test('should require strong passwords during registration', async () => {
            const weakPasswords = [
                '123',
                'password',
                'admin',
                'qwerty',
                '123456',
                'password123'
            ];

            for (const weakPassword of weakPasswords) {
                await request(app)
                    .post('/api/auth/register')
                    .send({
                        email: 'newuser@test.com',
                        name: 'Test User',
                        password: weakPassword,
                        role: 'client'
                    })
                    .expect(400);
            }
        });
    });

    describe('4.4.3 - Testing for Weak Lock Out Mechanism', () => {
        test('should implement account lockout after failed attempts', async () => {
            const testEmail = 'lockout-test@example.com';

            // Încearcă 5 logări eșuate
            for (let i = 0; i < 5; i++) {
                await request(app)
                    .post('/api/auth/login')
                    .send({
                        email: testEmail,
                        password: 'wrong-password'
                    })
                    .expect(401);
            }

            // A 6-a încercare ar trebui să fie blocată
            const response = await request(app)
                .post('/api/auth/login')
                .send({
                    email: testEmail,
                    password: 'wrong-password'
                })
                .expect(429); // Too Many Requests

            expect(response.body.error).toContain('Cont temporar blocat');
        });

        test('should implement exponential backoff for lockouts', async () => {
            const testEmail = 'backoff-test@example.com';

            // Primera blocare - 1 minut
            await createFailedAttempts(testEmail, 5);

            const firstLockout = await request(app)
                .post('/api/auth/login')
                .send({
                    email: testEmail,
                    password: 'wrong-password'
                })
                .expect(429);

            expect(firstLockout.body.lockoutDuration).toBe(60); // 60 secunde

            // După deblocare, încă 5 încercări eșuate
            await setTimeout(61000); // Așteaptă 61 secunde
            await createFailedAttempts(testEmail, 5);

            const secondLockout = await request(app)
                .post('/api/auth/login')
                .send({
                    email: testEmail,
                    password: 'wrong-password'
                })
                .expect(429);

            expect(secondLockout.body.lockoutDuration).toBe(120); // 2 minute
        });
    });

    describe('4.4.4 - Testing for Bypassing Authentication Schema', () => {
        test('should not allow access to protected routes without token', async () => {
            const protectedEndpoints = [
                '/api/admin/cpanel',
                '/api/client/schedule',
                '/api/user/profile',
                '/api/admin/manage-users'
            ];

            for (const endpoint of protectedEndpoints) {
                await request(app)
                    .get(endpoint)
                    .expect(401);
            }
        });

        test('should not allow access with invalid tokens', async () => {
            const invalidTokens = [
                'invalid-token',
                'Bearer invalid',
                'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.invalid',
                '', // empty token
                null
            ];

            for (const token of invalidTokens) {
                await request(app)
                    .get('/api/admin/cpanel')
                    .set('Authorization', `Bearer ${token}`)
                    .expect(401);
            }
        });

        test('should not allow SQL injection in login fields', async () => {
            const sqlInjectionPayloads = [
                "' OR '1'='1",
                "'; DROP TABLE users; --",
                "' UNION SELECT * FROM users --",
                "admin'--",
                "admin'#"
            ];

            for (const payload of sqlInjectionPayloads) {
                await request(app)
                    .post('/api/auth/login')
                    .send({
                        email: payload,
                        password: payload
                    })
                    .expect(401);
            }
        });
    });

    describe('4.4.5 - Testing for Vulnerable Remember Password', () => {
        test('should implement secure remember me functionality', async () => {
            const response = await request(app)
                .post('/api/auth/login')
                .send({
                    email: 'admin@test.com',
                    password: 'Admin123!@#',
                    rememberMe: true
                })
                .expect(200);

            const cookies = response.headers['set-cookie'];
            const rememberCookie = cookies.find(cookie =>
                cookie.includes('remember_token')
            );

            expect(rememberCookie).toBeDefined();
            expect(rememberCookie).toContain('HttpOnly');
            expect(rememberCookie).toContain('Secure');
            expect(rememberCookie).toContain('SameSite=Strict');
        });

        test('should not store plain text passwords in remember tokens', async () => {
            const response = await request(app)
                .post('/api/auth/login')
                .send({
                    email: 'admin@test.com',
                    password: 'Admin123!@#',
                    rememberMe: true
                });

            const cookies = response.headers['set-cookie'];
            const rememberCookie = cookies.find(cookie =>
                cookie.includes('remember_token')
            );

            // Token-ul nu trebuie să conțină parola în clar
            expect(rememberCookie).not.toContain('Admin123!@#');
            expect(rememberCookie).not.toContain('password');
        });
    });

    describe('4.4.11 - Testing Multi-Factor Authentication', () => {
        test('should require email verification for new accounts', async () => {
            const response = await request(app)
                .post('/api/auth/register')
                .send({
                    email: 'newuser@example.com',
                    name: 'New User',
                    password: 'StrongPass123!@#',
                    role: 'client'
                })
                .expect(201);

            expect(response.body.requiresVerification).toBe(true);
            expect(response.body.verificationSent).toBe(true);

            // Încearcă să se logheze fără verificare
            await request(app)
                .post('/api/auth/login')
                .send({
                    email: 'newuser@example.com',
                    password: 'StrongPass123!@#'
                })
                .expect(403);
        });

        test('should send SMS verification codes', async () => {
            const response = await request(app)
                .post('/api/auth/send-sms-verification')
                .set('Authorization', `Bearer ${clientToken}`)
                .send({
                    phoneNumber: '+40700000000'
                })
                .expect(200);

            expect(response.body.smsSent).toBe(true);
            expect(response.body.message).toContain('SMS trimis');
        });

        test('should validate SMS verification codes', async () => {
            // Trimite cod SMS
            await request(app)
                .post('/api/auth/send-sms-verification')
                .set('Authorization', `Bearer ${clientToken}`)
                .send({
                    phoneNumber: '+40700000000'
                });

            // Încearcă cu cod greșit
            await request(app)
                .post('/api/auth/verify-sms')
                .set('Authorization', `Bearer ${clientToken}`)
                .send({
                    phoneNumber: '+40700000000',
                    code: '000000'
                })
                .expect(400);

            // Test cu cod valid (mock)
            const validResponse = await request(app)
                .post('/api/auth/verify-sms')
                .set('Authorization', `Bearer ${clientToken}`)
                .send({
                    phoneNumber: '+40700000000',
                    code: '123456' // Mock valid code
                })
                .expect(200);

            expect(validResponse.body.verified).toBe(true);
        });
    });
});

// Helper functions
async function createTestUser(email, password, role) {
    const authUtils = new AuthUtils();
    const hashedPassword = await authUtils.hashPassword(password);

    // Mock user creation and return token
    const user = {
        id: Math.random().toString(36).substr(2, 9),
        email,
        password: hashedPassword,
        name: role === 'admin' ? 'Test Admin' : 'Test Client',
        role,
        verified: true
    };

    return authUtils.generateToken(user);
}

async function createFailedAttempts(email, count) {
    for (let i = 0; i < count; i++) {
        await request(app)
            .post('/api/auth/login')
            .send({
                email,
                password: 'wrong-password'
            });
    }
}

async function cleanupTestData() {
    // Cleanup test data if needed
    console.log('Cleaning up test data...');
}

module.exports = {
    createTestUser,
    createFailedAttempts
};