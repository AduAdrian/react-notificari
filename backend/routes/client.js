const express = require('express');
const { requireClient, requireOwnershipOrAdmin, validateInput, SecurityLogger } = require('../middleware/AuthMiddleware');
const database = require('../utils/database');
const { v4: uuidv4 } = require('uuid');
const router = express.Router();

// Generated by Copilot - Client Schedule Menu Routes with OWASP Security

// Middleware pentru validare input pe toate rutele client
router.use(validateInput);
router.use(requireClient);

/**
 * GET /api/client/schedule
 * Meniul principal de programări pentru clienți
 * OWASP 4.5.3 - Client privilege separation
 */
router.get('/schedule', (req, res) => {
    try {
        SecurityLogger.logRoleAccess(req.user.userId, 'client', '/schedule', true, req.ip);

        // Citește doar programările utilizatorului curent
        const userSchedules = getUserSchedules(req.user.userId);

        res.json({
            access: 'personal_only',
            role: 'client',
            redirectTo: '/client/schedule-menu',
            user: {
                id: req.user.userId,
                email: req.user.email,
                name: req.user.name,
                role: 'client'
            },
            schedules: userSchedules,
            canAddSchedule: true,
            canViewOthers: false,
            canEditOwn: true,
            canDeleteOwn: true,
            availableServices: [
                'Inspecția tehnică periodică',
                'Verificare instalație GPL',
                'Verificare sisteme frânare',
                'Control emisii poluante',
                'Verificare instalații electrice',
                'Inspecție completă vehicul'
            ],
            availableTimeSlots: [
                '08:00', '09:00', '10:00', '11:00',
                '12:00', '13:00', '14:00', '15:00', '16:00'
            ],
            message: 'Acces acordat la meniul personal de programări'
        });

    } catch (error) {
        console.error('Eroare accesare meniu programări:', error);
        SecurityLogger.logSuspiciousActivity(req.user?.userId, 'SCHEDULE_MENU_ERROR', {
            error: error.message,
            ip: req.ip
        });
        res.status(500).json({
            error: 'Eroare la accesarea meniului de programări.'
        });
    }
});

/**
 * POST /api/client/schedule
 * Adaugă o programare nouă pentru client
 * OWASP 4.5.4 - Secure object creation with UUID
 */
router.post('/schedule', (req, res) => {
    try {
        const { date, time, service, vehicleDetails, notes } = req.body;

        // Validare input obligatorii
        if (!date || !time || !service) {
            return res.status(400).json({
                error: 'Câmpurile data, ora și serviciul sunt obligatorii.'
            });
        }

        // Validare format dată
        const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
        if (!dateRegex.test(date)) {
            return res.status(400).json({
                error: 'Format dată invalid. Folosește YYYY-MM-DD.'
            });
        }

        // Validare că data este în viitor
        const scheduleDate = new Date(date + 'T' + time);
        if (scheduleDate <= new Date()) {
            return res.status(400).json({
                error: 'Data programării trebuie să fie în viitor.'
            });
        }

        // Validare ore disponibile
        const validTimes = ['08:00', '09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00'];
        if (!validTimes.includes(time)) {
            return res.status(400).json({
                error: 'Ora selectată nu este disponibilă.'
            });
        }

        // Verifică disponibilitatea orei
        if (isTimeSlotTaken(date, time)) {
            return res.status(409).json({
                error: 'Ora selectată este deja ocupată. Te rugăm să alegi altă oră.'
            });
        }

        // Creează programarea cu UUID pentru securitate
        const scheduleId = uuidv4();
        const newSchedule = {
            id: scheduleId,
            userId: req.user.userId,
            userEmail: req.user.email,
            date,
            time,
            service,
            vehicleDetails: vehicleDetails || {},
            notes: notes || '',
            status: 'confirmed',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        // Salvează în database
        saveSchedule(newSchedule);

        SecurityLogger.logRoleAccess(req.user.userId, 'client', '/schedule/create', true, req.ip);

        res.status(201).json({
            message: 'Programare adăugată cu succes!',
            scheduleId,
            schedule: newSchedule,
            status: 'confirmed',
            confirmationNumber: `PROG-${Date.now()}-${scheduleId.substring(0, 8).toUpperCase()}`
        });

    } catch (error) {
        console.error('Eroare creare programare:', error);
        SecurityLogger.logSuspiciousActivity(req.user?.userId, 'SCHEDULE_CREATE_ERROR', {
            error: error.message,
            ip: req.ip
        });
        res.status(500).json({
            error: 'Eroare la crearea programării.'
        });
    }
});

/**
 * GET /api/client/schedule/:scheduleId
 * Vizualizează detaliile unei programări (doar proprietarul)
 * OWASP 4.5.4 - IDOR protection
 */
router.get('/schedule/:scheduleId', (req, res) => {
    try {
        const { scheduleId } = req.params;

        if (!scheduleId) {
            return res.status(400).json({
                error: 'ID programare este obligatoriu.'
            });
        }

        const schedule = getScheduleById(scheduleId);

        if (!schedule) {
            return res.status(404).json({
                error: 'Programarea nu a fost găsită.'
            });
        }

        // Verifică că utilizatorul poate accesa această programare
        if (schedule.userId !== req.user.userId) {
            SecurityLogger.logSuspiciousActivity(req.user.userId, 'UNAUTHORIZED_SCHEDULE_ACCESS', {
                attemptedScheduleId: scheduleId,
                scheduleOwnerId: schedule.userId,
                ip: req.ip
            });

            return res.status(403).json({
                error: 'Nu poți accesa programarea altui utilizator.'
            });
        }

        res.json({
            schedule,
            canEdit: true,
            canDelete: true,
            canReschedule: schedule.status === 'confirmed'
        });

    } catch (error) {
        console.error('Eroare încărcare programare:', error);
        res.status(500).json({
            error: 'Eroare la încărcarea programării.'
        });
    }
});

/**
 * PUT /api/client/schedule/:scheduleId
 * Editează o programare existentă (doar proprietarul)
 * OWASP 4.5.4 - Secure object modification
 */
router.put('/schedule/:scheduleId', (req, res) => {
    try {
        const { scheduleId } = req.params;
        const { date, time, service, vehicleDetails, notes } = req.body;

        const existingSchedule = getScheduleById(scheduleId);

        if (!existingSchedule) {
            return res.status(404).json({
                error: 'Programarea nu a fost găsită.'
            });
        }

        // Verifică ownership
        if (existingSchedule.userId !== req.user.userId) {
            SecurityLogger.logSuspiciousActivity(req.user.userId, 'UNAUTHORIZED_SCHEDULE_EDIT', {
                attemptedScheduleId: scheduleId,
                scheduleOwnerId: existingSchedule.userId,
                ip: req.ip
            });

            return res.status(403).json({
                error: 'Nu poți modifica programarea altui utilizator.'
            });
        }

        // Verifică dacă programarea poate fi modificată
        if (existingSchedule.status === 'completed' || existingSchedule.status === 'cancelled') {
            return res.status(400).json({
                error: 'Nu poți modifica o programare completată sau anulată.'
            });
        }

        // Validări pentru noile date (dacă sunt furnizate)
        if (date && time) {
            const newScheduleDate = new Date(date + 'T' + time);
            if (newScheduleDate <= new Date()) {
                return res.status(400).json({
                    error: 'Noua dată trebuie să fie în viitor.'
                });
            }

            // Verifică disponibilitatea noii ore (exceptând programarea curentă)
            if (isTimeSlotTaken(date, time, scheduleId)) {
                return res.status(409).json({
                    error: 'Ora selectată este deja ocupată.'
                });
            }
        }

        // Actualizează programarea
        const updatedSchedule = {
            ...existingSchedule,
            date: date || existingSchedule.date,
            time: time || existingSchedule.time,
            service: service || existingSchedule.service,
            vehicleDetails: vehicleDetails || existingSchedule.vehicleDetails,
            notes: notes || existingSchedule.notes,
            updatedAt: new Date().toISOString()
        };

        updateSchedule(scheduleId, updatedSchedule);

        res.json({
            message: 'Programare actualizată cu succes!',
            schedule: updatedSchedule
        });

    } catch (error) {
        console.error('Eroare actualizare programare:', error);
        res.status(500).json({
            error: 'Eroare la actualizarea programării.'
        });
    }
});

/**
 * DELETE /api/client/schedule/:scheduleId
 * Șterge o programare (doar proprietarul)
 * OWASP 4.5.4 - Secure object deletion
 */
router.delete('/schedule/:scheduleId', (req, res) => {
    try {
        const { scheduleId } = req.params;

        const existingSchedule = getScheduleById(scheduleId);

        if (!existingSchedule) {
            return res.status(404).json({
                error: 'Programarea nu a fost găsită.'
            });
        }

        // Verifică ownership
        if (existingSchedule.userId !== req.user.userId) {
            SecurityLogger.logSuspiciousActivity(req.user.userId, 'UNAUTHORIZED_SCHEDULE_DELETE', {
                attemptedScheduleId: scheduleId,
                scheduleOwnerId: existingSchedule.userId,
                ip: req.ip
            });

            return res.status(403).json({
                error: 'Nu poți șterge programarea altui utilizator.'
            });
        }

        // Șterge programarea
        deleteSchedule(scheduleId);

        SecurityLogger.logRoleAccess(req.user.userId, 'client', `/schedule/delete/${scheduleId}`, true, req.ip);

        res.json({
            message: 'Programare ștearsă cu succes!',
            deletedScheduleId: scheduleId,
            deletedAt: new Date().toISOString()
        });

    } catch (error) {
        console.error('Eroare ștergere programare:', error);
        res.status(500).json({
            error: 'Eroare la ștergerea programării.'
        });
    }
});

/**
 * GET /api/client/permissions
 * Lista permisiunilor client - pentru teste RBAC
 */
router.get('/permissions', (req, res) => {
    res.json({
        permissions: [
            'view_own_schedule',
            'add_schedule',
            'edit_own_profile',
            'view_own_notifications'
        ],
        role: 'client',
        fullAccess: false,
        personalAccessOnly: true
    });
});

// Helper functions pentru gestionarea programărilor
function getUserSchedules(userId) {
    try {
        // TODO: Implementează citirea din database
        // Pentru moment, returnează array gol
        return [];
    } catch (error) {
        console.error('Eroare citire programări utilizator:', error);
        return [];
    }
}

function getScheduleById(scheduleId) {
    try {
        // TODO: Implementează citirea din database
        return null;
    } catch (error) {
        console.error('Eroare citire programare:', error);
        return null;
    }
}

function saveSchedule(schedule) {
    try {
        // TODO: Implementează salvarea în database
        console.log('Salvând programarea:', schedule.id);
    } catch (error) {
        console.error('Eroare salvare programare:', error);
        throw error;
    }
}

function updateSchedule(scheduleId, updatedSchedule) {
    try {
        // TODO: Implementează actualizarea în database
        console.log('Actualizând programarea:', scheduleId);
    } catch (error) {
        console.error('Eroare actualizare programare:', error);
        throw error;
    }
}

function deleteSchedule(scheduleId) {
    try {
        // TODO: Implementează ștergerea din database
        console.log('Ștergând programarea:', scheduleId);
    } catch (error) {
        console.error('Eroare ștergere programare:', error);
        throw error;
    }
}

function isTimeSlotTaken(date, time, excludeScheduleId = null) {
    try {
        // TODO: Implementează verificarea disponibilității
        // Pentru moment, returnează false (toate orele sunt disponibile)
        return false;
    } catch (error) {
        console.error('Eroare verificare disponibilitate:', error);
        return true; // În caz de eroare, considerăm că ora nu este disponibilă
    }
}

/**
 * Middleware pentru capturarea erorilor în routes client
 */
router.use((error, req, res, next) => {
    console.error('Eroare în client routes:', error);

    SecurityLogger.logSuspiciousActivity(
        req.user?.userId || 'unknown',
        'CLIENT_ROUTE_ERROR',
        {
            path: req.path,
            method: req.method,
            error: error.message,
            ip: req.ip
        }
    );

    res.status(500).json({
        error: 'Eroare internă în zona clientului.'
    });
});

module.exports = router;