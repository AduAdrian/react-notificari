import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import './AdminDashboard.css';

interface Stats {
    totalClients: number;
}

interface Client {
    id: string;
    nrInmatriculare: string;
    nrTelefon: string;
    valabilitate: string;
    optional?: string;
    createdAt?: string;
}

const AdminDashboard = () => {
    const { user, token, logout } = useAuth();
    const [stats, setStats] = useState<Stats | null>(null);
    const [clients, setClients] = useState<Client[]>([]);
    const [activeTab, setActiveTab] = useState('dashboard');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    // Formularul pentru clienți
    const [clientForm, setClientForm] = useState({
        nrInmatriculare: '',
        nrTelefon: '',
        valabilitate: 'today',
        optional: ''
    });

    // Verifică dacă utilizatorul este admin
    useEffect(() => {
        if (!user || user.role !== 'admin') {
            setError('Acces interzis. Doar administratorii pot accesa această pagină.');
            return;
        }

        loadDashboardData();
    }, [user]);

    const loadDashboardData = async () => {
        setLoading(true);
        try {
            await Promise.all([
                loadStats(),
                loadClients()
            ]);
        } catch (error) {
            setError('Eroare la încărcarea datelor');
        }
        setLoading(false);
    };

    const loadStats = async () => {
        try {
            const response = await fetch('/api/admin/dashboard', {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();
            if (data.success) {
                setStats({ totalClients: data.stats.totalClients || 0 });
            }
        } catch (error) {
            console.error('Eroare la încărcarea statisticilor:', error);
        }
    };

    const loadClients = async () => {
        try {
            const response = await fetch('/api/admin/clients', {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();
            if (data.success) {
                setClients(data.clients);
            }
        } catch (error) {
            console.error('Eroare la încărcarea clienților:', error);
        }
    };

    const handleAddClient = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        try {
            const response = await fetch('/api/admin/clients', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(clientForm)
            });

            const data = await response.json();
            if (data.success) {
                setClients([...clients, data.client]);
                setClientForm({
                    nrInmatriculare: '',
                    nrTelefon: '',
                    valabilitate: 'today',
                    optional: ''
                });
                alert('Client adăugat cu succes!');
            } else {
                alert(data.message);
            }
        } catch (error) {
            console.error('Eroare la adăugarea clientului:', error);
            alert('Eroare la adăugarea clientului');
        }
    };

    const formatDate = (dateString: string | undefined) => {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        return date.toLocaleDateString('ro-RO');
    };

    const getValidityLabel = (validity: string) => {
        const labels: { [key: string]: string } = {
            'today': 'Astăzi',
            '6months': '6 luni',
            '1year': '1 an',
            '2years': '2 ani'
        };
        return labels[validity] || validity;
    };

    if (!user || user.role !== 'admin') {
        return (
            <div className="admin-dashboard">
                <div className="error-message">
                    <h2>⛔ Acces Interzis</h2>
                    <p>Doar administratorii pot accesa această pagină.</p>
                    <button onClick={logout} className="btn btn-secondary">
                        Înapoi la Login
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="admin-dashboard">
            <div className="admin-header">
                <h1>� Panou Management Clienți</h1>
                <div className="admin-user-info">
                    <span>Bun venit, {user.firstName} {user.lastName}</span>
                    <button onClick={logout} className="btn btn-secondary btn-sm">
                        Ieșire
                    </button>
                </div>
            </div>

            {loading && <div className="loading">Se încarcă...</div>}
            {error && <div className="error-message">{error}</div>}

            {/* Management Clienți */}
            <div className="clients-content">

            {/* Dashboard Tab - Acum doar pentru clienți */}
            {activeTab === 'dashboard' && stats && (
                <div className="dashboard-content">
                    <div className="stats-grid">
                        <div className="stat-card">
                            <h3>� Total Clienți</h3>
                            <div className="stat-number">{stats.totalClients || 0}</div>
                        </div>
                        <div className="stat-card">
                            <h3>📋 Clienți Activi</h3>
                            <div className="stat-number">{clients.filter(c => c.valabilitate !== 'today').length || 0}</div>
                        </div>
                        <div className="stat-card">
                            <h3>⏰ Expiră Astăzi</h3>
                            <div className="stat-number">{clients.filter(c => c.valabilitate === 'today').length || 0}</div>
                        </div>
                        <div className="stat-card">
                            <h3>� Clienți Noi (Luna)</h3>
                            <div className="stat-number">{clients.filter(c => {
                                if (!c.createdAt) return false;
                                const created = new Date(c.createdAt);
                                const now = new Date();
                                return created.getMonth() === now.getMonth() && created.getFullYear() === now.getFullYear();
                            }).length || 0}</div>
                        </div>
                        <div className="stat-card">
                            <h3>� Numere Telefon Unice</h3>
                            <div className="stat-number">{new Set(clients.map(c => c.nrTelefon)).size || 0}</div>
                        </div>
                        <div className="stat-card">
                            <h3>� Mașini Înregistrate</h3>
                            <div className="stat-number">{new Set(clients.map(c => c.nrInmatriculare)).size || 0}</div>
                        </div>
                    </div>
                </div>
            )}

            {/* Clients Tab */}
            {activeTab === 'clients' && (
                <div className="clients-content">
                    <div className="clients-header">
                        <h2>👤 Management Clienți</h2>
                    </div>

                    {/* Formular adăugare client */}
                    <div className="add-vehicle-form">
                        <h3>➕ Adaugă Client Nou</h3>
                        <form onSubmit={handleAddClient}>
                            <div className="form-row">
                                <div className="form-group">
                                    <label>Număr Înmatriculare:</label>
                                    <input
                                        type="text"
                                        value={clientForm.nrInmatriculare}
                                        onChange={(e) => setClientForm({
                                            ...clientForm,
                                            nrInmatriculare: e.target.value.toUpperCase()
                                        })}
                                        placeholder="B123ABC"
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label>Număr Telefon:</label>
                                    <input
                                        type="tel"
                                        value={clientForm.nrTelefon}
                                        onChange={(e) => setClientForm({
                                            ...clientForm,
                                            nrTelefon: e.target.value
                                        })}
                                        placeholder="0756596565"
                                        required
                                    />
                                </div>
                            </div>
                            <div className="form-row">
                                <div className="form-group">
                                    <label>Valabilitate:</label>
                                    <select
                                        value={clientForm.valabilitate}
                                        onChange={(e) => setClientForm({
                                            ...clientForm,
                                            valabilitate: e.target.value
                                        })}
                                        required
                                        title="Selectează perioada de validitate"
                                    >
                                        <option value="today">Astăzi</option>
                                        <option value="6months">6 luni</option>
                                        <option value="1year">1 an</option>
                                        <option value="2years">2 ani</option>
                                    </select>
                                </div>
                                <div className="form-group">
                                    <label>Câmp Opțional:</label>
                                    <input
                                        type="text"
                                        value={clientForm.optional}
                                        onChange={(e) => setClientForm({
                                            ...clientForm,
                                            optional: e.target.value
                                        })}
                                        placeholder="Observații..."
                                    />
                                </div>
                            </div>
                            <button type="submit" className="btn btn-primary">
                                ➕ Adaugă Client
                            </button>
                        </form>
                    </div>

                    {/* Lista clienți */}
                    <div className="vehicles-list">
                        <h3>📋 Lista Clienți ({clients.length})</h3>
                        {clients.length === 0 ? (
                            <div className="no-vehicles">
                                <p>Nu există clienți înregistrați.</p>
                            </div>
                        ) : (
                            <div className="table-container">
                                <table className="vehicles-table">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Nr. Înmatriculare</th>
                                            <th>Nr. Telefon</th>
                                            <th>Valabilitate</th>
                                            <th>Opțional</th>
                                            <th>Data creării</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {clients.map((client, index) => (
                                            <tr key={client.id || index}>
                                                <td>{client.id || index + 1}</td>
                                                <td className="nr-inmatriculare">
                                                    {client.nrInmatriculare}
                                                </td>
                                                <td>{client.nrTelefon}</td>
                                                <td>
                                                    <span className={`validity ${client.valabilitate}`}>
                                                        {getValidityLabel(client.valabilitate)}
                                                    </span>
                                                </td>
                                                <td>{client.optional || '-'}</td>
                                                <td>{formatDate(client.createdAt)}</td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
};

export default AdminDashboard;