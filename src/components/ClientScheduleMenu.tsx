import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import './ClientScheduleMenu.css';

// Generated by Copilot - Client Schedule Menu with OWASP Security

interface Schedule {
    id: string;
    date: string;
    time: string;
    service: string;
    vehicleDetails: {
        plate?: string;
        brand?: string;
        model?: string;
    };
    notes?: string;
    status: 'confirmed' | 'pending' | 'completed' | 'cancelled';
    confirmationNumber: string;
    createdAt: string;
}

interface ClientScheduleMenuProps {
    userSpecific?: boolean;
}

export const ClientScheduleMenu: React.FC<ClientScheduleMenuProps> = ({
    userSpecific = true
}) => {
    const { user, token, logout } = useAuth();
    const [schedules, setSchedules] = useState<Schedule[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string>('');
    const [activeTab, setActiveTab] = useState('my-schedules');
    const [showAddForm, setShowAddForm] = useState(false);

    // Form pentru programare nouă
    const [scheduleForm, setScheduleForm] = useState({
        date: '',
        time: '',
        service: '',
        vehicleDetails: {
            plate: '',
            brand: '',
            model: ''
        },
        notes: ''
    });

    const availableServices = [
        'Inspecția tehnică periodică',
        'Verificare instalație GPL',
        'Verificare sisteme frânare',
        'Control emisii poluante',
        'Verificare instalații electrice',
        'Inspecție completă vehicul'
    ];

    const availableTimeSlots = [
        '08:00', '09:00', '10:00', '11:00',
        '12:00', '13:00', '14:00', '15:00', '16:00'
    ];

    // OWASP 4.5.3 - Role verification
    useEffect(() => {
        if (!user || user.role !== 'client') {
            setError('Acces interzis. Doar clienții pot accesa meniul de programări.');
            return;
        }

        loadScheduleMenu();
    }, [user]);

    const loadScheduleMenu = async () => {
        setLoading(true);
        setError('');

        try {
            const response = await fetch('/api/client/schedule', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            const data = await response.json();

            if (!response.ok) {
                if (response.status === 403) {
                    throw new Error('Nu ai permisiunea să accesezi meniul de programări.');
                }
                throw new Error(data.error || 'Eroare la încărcarea meniului.');
            }

            if (data.access !== 'personal_only') {
                throw new Error('Acces invalid la meniul de programări.');
            }

            setSchedules(data.schedules || []);

        } catch (err: any) {
            console.error('Eroare încărcare meniu programări:', err);
            setError(err.message || 'Eroare la încărcarea meniului de programări.');
        } finally {
            setLoading(false);
        }
    };

    const handleAddSchedule = async (e: React.FormEvent) => {
        e.preventDefault();
        setLoading(true);
        setError('');

        try {
            // Validare frontend
            if (!scheduleForm.date || !scheduleForm.time || !scheduleForm.service) {
                throw new Error('Câmpurile dată, oră și serviciu sunt obligatorii.');
            }

            // Verifică că data este în viitor
            const selectedDate = new Date(scheduleForm.date + 'T' + scheduleForm.time);
            if (selectedDate <= new Date()) {
                throw new Error('Data programării trebuie să fie în viitor.');
            }

            const response = await fetch('/api/client/schedule', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(scheduleForm)
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Eroare la crearea programării.');
            }

            // Refresh lista programărilor
            await loadScheduleMenu();

            // Reset form
            setScheduleForm({
                date: '',
                time: '',
                service: '',
                vehicleDetails: { plate: '', brand: '', model: '' },
                notes: ''
            });

            setShowAddForm(false);
            alert(`Programare confirmată! Număr confirmare: ${data.confirmationNumber}`);

        } catch (err: any) {
            setError(err.message || 'Eroare la adăugarea programării.');
        } finally {
            setLoading(false);
        }
    };

    const handleDeleteSchedule = async (scheduleId: string) => {
        if (!confirm('Ești sigur că vrei să ștergi această programare?')) {
            return;
        }

        try {
            const response = await fetch(`/api/client/schedule/${scheduleId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error || 'Eroare la ștergerea programării.');
            }

            // Refresh lista
            await loadScheduleMenu();
            alert('Programare ștearsă cu succes!');

        } catch (err: any) {
            setError(err.message || 'Eroare la ștergerea programării.');
        }
    };

    const handleLogout = () => {
        if (confirm('Ești sigur că vrei să te deloghezi?')) {
            logout();
        }
    };

    // Verificare dublă pe frontend
    if (!user || user.role !== 'client') {
        return (
            <div className="unauthorized-access">
                <h1>Acces Interzis</h1>
                <p>Nu ai permisiunea să accesezi meniul de programări.</p>
                <p>Doar clienții pot accesa această zonă.</p>
                <button onClick={() => window.location.href = '/login'} className="btn btn-primary">
                    Înapoi la Login
                </button>
            </div>
        );
    }

    if (loading && schedules.length === 0) {
        return (
            <div className="loading-container">
                <div className="spinner"></div>
                <p>Se încarcă meniul de programări...</p>
            </div>
        );
    }

    return (
        <div className="client-schedule-menu">
            <header className="schedule-header">
                <div className="header-content">
                    <h1>Meniul Personal de Programări</h1>
                    <div className="client-info">
                        <span>Bun venit, {user.firstName} {user.lastName}</span>
                        <span className="role-badge client">CLIENT</span>
                        <button onClick={handleLogout} className="logout-btn">
                            Logout
                        </button>
                    </div>
                </div>
            </header>

            <nav className="schedule-nav">
                <button
                    className={activeTab === 'my-schedules' ? 'nav-btn active' : 'nav-btn'}
                    onClick={() => setActiveTab('my-schedules')}
                >
                    Programările Mele
                </button>
                <button
                    className={activeTab === 'add-schedule' ? 'nav-btn active' : 'nav-btn'}
                    onClick={() => setActiveTab('add-schedule')}
                >
                    Programare Nouă
                </button>
                <button
                    className={activeTab === 'history' ? 'nav-btn active' : 'nav-btn'}
                    onClick={() => setActiveTab('history')}
                >
                    Istoric Programări
                </button>
            </nav>

            {error && (
                <div className="error-message">
                    <p>{error}</p>
                    <button onClick={() => setError('')} className="close-error">×</button>
                </div>
            )}

            <main className="schedule-content">
                {activeTab === 'my-schedules' && (
                    <div className="my-schedules">
                        <div className="section-header">
                            <h2>Programările Mele Active</h2>
                            <button
                                onClick={() => setShowAddForm(true)}
                                className="btn btn-primary"
                                disabled={loading}
                            >
                                + Adaugă Programare
                            </button>
                        </div>

                        {schedules.length === 0 ? (
                            <div className="no-schedules">
                                <p>Nu ai încă nicio programare.</p>
                                <button
                                    onClick={() => setShowAddForm(true)}
                                    className="btn btn-primary"
                                >
                                    Adaugă Prima Programare
                                </button>
                            </div>
                        ) : (
                            <div className="schedules-grid">
                                {schedules.filter(s => s.status === 'confirmed' || s.status === 'pending').map(schedule => (
                                    <div key={schedule.id} className="schedule-card">
                                        <div className="schedule-header">
                                            <h3>{schedule.service}</h3>
                                            <span className={`status ${schedule.status}`}>
                                                {schedule.status === 'confirmed' ? 'Confirmată' : 'În așteptare'}
                                            </span>
                                        </div>

                                        <div className="schedule-details">
                                            <p><strong>Data:</strong> {schedule.date}</p>
                                            <p><strong>Ora:</strong> {schedule.time}</p>

                                            {schedule.vehicleDetails.plate && (
                                                <p><strong>Vehicul:</strong> {schedule.vehicleDetails.plate}
                                                    {schedule.vehicleDetails.brand && ` (${schedule.vehicleDetails.brand} ${schedule.vehicleDetails.model})`}
                                                </p>
                                            )}

                                            {schedule.notes && (
                                                <p><strong>Observații:</strong> {schedule.notes}</p>
                                            )}

                                            <p><strong>Confirmare:</strong> {schedule.confirmationNumber}</p>
                                        </div>

                                        <div className="schedule-actions">
                                            <button
                                                onClick={() => handleDeleteSchedule(schedule.id)}
                                                className="btn btn-danger"
                                                disabled={loading}
                                            >
                                                Anulează
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                )}

                {activeTab === 'add-schedule' && (
                    <PersonalScheduleForm
                        scheduleForm={scheduleForm}
                        setScheduleForm={setScheduleForm}
                        onSubmit={handleAddSchedule}
                        loading={loading}
                        availableServices={availableServices}
                        availableTimeSlots={availableTimeSlots}
                    />
                )}

                {activeTab === 'history' && (
                    <ScheduleHistory
                        schedules={schedules.filter(s => s.status === 'completed' || s.status === 'cancelled')}
                        userId={user.id}
                    />
                )}
            </main>

            {/* Modal pentru programare rapidă */}
            {showAddForm && (
                <div className="modal-overlay" onClick={() => setShowAddForm(false)}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>Programare Nouă</h3>
                            <button onClick={() => setShowAddForm(false)} className="close-modal">×</button>
                        </div>

                        <PersonalScheduleForm
                            scheduleForm={scheduleForm}
                            setScheduleForm={setScheduleForm}
                            onSubmit={handleAddSchedule}
                            loading={loading}
                            availableServices={availableServices}
                            availableTimeSlots={availableTimeSlots}
                        />
                    </div>
                </div>
            )}
        </div>
    );
};

// Sub-componente
const PersonalScheduleForm: React.FC<{
    scheduleForm: any;
    setScheduleForm: (form: any) => void;
    onSubmit: (e: React.FormEvent) => void;
    loading: boolean;
    availableServices: string[];
    availableTimeSlots: string[];
}> = ({ scheduleForm, setScheduleForm, onSubmit, loading, availableServices, availableTimeSlots }) => {

    const handleInputChange = (field: string, value: string) => {
        if (field.startsWith('vehicleDetails.')) {
            const vehicleField = field.split('.')[1];
            setScheduleForm(prev => ({
                ...prev,
                vehicleDetails: {
                    ...prev.vehicleDetails,
                    [vehicleField]: value
                }
            }));
        } else {
            setScheduleForm(prev => ({
                ...prev,
                [field]: value
            }));
        }
    };

    return (
        <div className="personal-schedule-form">
            <h2>Adaugă Date Pentru Programare</h2>

            <form onSubmit={onSubmit} className="schedule-form">
                <div className="form-row">
                    <div className="form-group">
                        <label htmlFor="date">Data *</label>
                        <input
                            type="date"
                            id="date"
                            value={scheduleForm.date}
                            onChange={(e) => handleInputChange('date', e.target.value)}
                            min={new Date().toISOString().split('T')[0]}
                            required
                            disabled={loading}
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="time">Ora *</label>
                        <select
                            id="time"
                            value={scheduleForm.time}
                            onChange={(e) => handleInputChange('time', e.target.value)}
                            required
                            disabled={loading}
                        >
                            <option value="">Selectează ora</option>
                            {availableTimeSlots.map(time => (
                                <option key={time} value={time}>{time}</option>
                            ))}
                        </select>
                    </div>
                </div>

                <div className="form-group">
                    <label htmlFor="service">Serviciul dorit *</label>
                    <select
                        id="service"
                        value={scheduleForm.service}
                        onChange={(e) => handleInputChange('service', e.target.value)}
                        required
                        disabled={loading}
                    >
                        <option value="">Selectează serviciul</option>
                        {availableServices.map(service => (
                            <option key={service} value={service}>{service}</option>
                        ))}
                    </select>
                </div>

                <div className="form-row">
                    <div className="form-group">
                        <label htmlFor="plate">Numărul de înmatriculare</label>
                        <input
                            type="text"
                            id="plate"
                            value={scheduleForm.vehicleDetails.plate}
                            onChange={(e) => handleInputChange('vehicleDetails.plate', e.target.value.toUpperCase())}
                            placeholder="ex: B123ABC"
                            disabled={loading}
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="brand">Marca vehiculului</label>
                        <input
                            type="text"
                            id="brand"
                            value={scheduleForm.vehicleDetails.brand}
                            onChange={(e) => handleInputChange('vehicleDetails.brand', e.target.value)}
                            placeholder="ex: Dacia"
                            disabled={loading}
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="model">Modelul vehiculului</label>
                        <input
                            type="text"
                            id="model"
                            value={scheduleForm.vehicleDetails.model}
                            onChange={(e) => handleInputChange('vehicleDetails.model', e.target.value)}
                            placeholder="ex: Logan"
                            disabled={loading}
                        />
                    </div>
                </div>

                <div className="form-group">
                    <label htmlFor="notes">Observații suplimentare</label>
                    <textarea
                        id="notes"
                        value={scheduleForm.notes}
                        onChange={(e) => handleInputChange('notes', e.target.value)}
                        placeholder="Menționează orice detalii importante..."
                        rows={3}
                        disabled={loading}
                    />
                </div>

                <div className="form-actions">
                    <button type="submit" className="btn btn-primary" disabled={loading}>
                        {loading ? 'Se procesează...' : 'Confirmă Programarea'}
                    </button>
                </div>
            </form>
        </div>
    );
};

const ScheduleHistory: React.FC<{
    schedules: Schedule[];
    userId: string;
}> = ({ schedules }) => {

    return (
        <div className="schedule-history">
            <h2>Istoricul Programărilor</h2>

            {schedules.length === 0 ? (
                <p>Nu ai încă programări în istoric.</p>
            ) : (
                <div className="history-list">
                    {schedules.map(schedule => (
                        <div key={schedule.id} className="history-item">
                            <div className="history-header">
                                <h4>{schedule.service}</h4>
                                <span className={`status ${schedule.status}`}>
                                    {schedule.status === 'completed' ? 'Finalizată' : 'Anulată'}
                                </span>
                            </div>

                            <div className="history-details">
                                <p><strong>Data:</strong> {schedule.date} la {schedule.time}</p>
                                {schedule.vehicleDetails.plate && (
                                    <p><strong>Vehicul:</strong> {schedule.vehicleDetails.plate}</p>
                                )}
                                <p><strong>Confirmare:</strong> {schedule.confirmationNumber}</p>
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
};

export default ClientScheduleMenu;