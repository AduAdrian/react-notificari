import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import axios from 'axios';
import './AdminDashboard.css';

// Generated by Copilot - Enhanced Admin Dashboard with OWASP Security & CPanel Access

interface Client {
    id: string;
    nrInmatriculare: string;
    nrTelefon: string;
    valabilitate: string;
    optional?: string;
    createdAt?: string;
}

interface AdminDashboardProps {
    cpanelAccess?: boolean;
    fullPermissions?: boolean;
}

interface DashboardStats {
    totalUsers: number;
    activeUsers: number;
    verifiedUsers: number;
    pendingUsers: number;
    adminUsers: number;
    totalClients: number;
    totalVehicles: number;
}

const AdminDashboard: React.FC<AdminDashboardProps> = ({
    cpanelAccess = true,
    fullPermissions = true
}) => {
    const { user, logout } = useAuth();
    const [clients, setClients] = useState<Client[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [stats, setStats] = useState<DashboardStats | null>(null);
    const [activeTab, setActiveTab] = useState('cpanel');

    // Formularul pentru clienți
    const [clientForm, setClientForm] = useState({
        nrInmatriculare: '',
        nrTelefon: '',
        valabilitate: '6months', // Start cu prima opțiune predefinită
        optional: '',
        manualDate: '' // Pentru data manuală
    });

    const [manualDateEnabled, setManualDateEnabled] = useState(false);

    // OWASP 4.5.3 - Role verification cu double-check
    useEffect(() => {
        if (!user || user.role !== 'admin') {
            setError('Acces interzis. Doar administratorii pot accesa CPanel-ul.');
            return;
        }

        // Verifică access CPanel prin API
        if (cpanelAccess && fullPermissions) {
            loadCPanelData();
            loadClients();
        } else {
            setError('Nu ai permisiunile necesare pentru accesarea CPanel-ului.');
        }
    }, [user, cpanelAccess, fullPermissions]);

    const loadCPanelData = async () => {
        try {
            setLoading(true);
            const response = await axios.get('/api/admin/cpanel', {
                withCredentials: true // Folosește cookie-urile pentru autentificare
            });

            if (response.data.access === 'full') {
                setStats(response.data.dashboardStats);
            } else {
                throw new Error('Acces CPanel invalid');
            }
        } catch (err: any) {
            console.error('Eroare încărcare CPanel:', err);
            if (err.response?.status === 403) {
                setError('Acces CPanel interzis. Doar administratorii cu drepturi complete.');
            } else {
                setError('Eroare la încărcarea CPanel-ului.');
            }
        } finally {
            setLoading(false);
        }
    };

    const loadClients = async () => {
        try {
            const response = await fetch('/api/admin/clients', {
                credentials: 'include', // Folosește cookie-urile pentru autentificare
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();
            if (data.success) {
                setClients(data.clients);
            }
        } catch (error) {
            console.error('Eroare la încărcarea clienților:', error);
        }
    };

    const handleValidityChange = (value: string) => {
        setClientForm({
            ...clientForm,
            valabilitate: value
        });
        setManualDateEnabled(value === 'manual');
    };

    const handleAddClient = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        try {
            // Pregătește datele pentru trimitere
            const requestData = {
                ...clientForm
            };

            // Pentru valabilitate manuală, include data
            if (clientForm.valabilitate === 'manual') {
                if (!clientForm.manualDate) {
                    alert('Te rugăm să selectezi o dată pentru valabilitatea manuală.');
                    return;
                }
                requestData.manualDate = clientForm.manualDate;
            }

            const response = await fetch('/api/admin/clients', {
                method: 'POST',
                credentials: 'include', // Folosește cookie-urile pentru autentificare
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            });

            const data = await response.json();
            if (data.success) {
                setClients([...clients, data.client]);
                setClientForm({
                    nrInmatriculare: '',
                    nrTelefon: '',
                    valabilitate: '6months', // Reset to first predefined option
                    optional: '',
                    manualDate: ''
                });
                setManualDateEnabled(false);
                alert('Client adăugat cu succes!');
            } else {
                alert(data.message);
            }
        } catch (error) {
            console.error('Eroare la adăugarea clientului:', error);
            alert('Eroare la adăugarea clientului');
        }
    };

    const formatDate = (dateString: string | undefined) => {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        return date.toLocaleDateString('ro-RO');
    };

    const getValidityLabel = (validity: string) => {
        const labels: { [key: string]: string } = {
            'today': 'Astăzi',
            '6months': '6 luni',
            '1year': '1 an',
            '2years': '2 ani'
        };
        return labels[validity] || validity;
    };

    if (!user || user.role !== 'admin') {
        return (
            <div className="admin-dashboard">
                <div className="error-message">
                    <h2>⛔ Acces Interzis</h2>
                    <p>Doar administratorii pot accesa această pagină.</p>
                    <button onClick={logout} className="btn btn-secondary">
                        Înapoi la Login
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="admin-dashboard">
            <div className="admin-header">
                <h1>🏢 Panou Management Clienți</h1>
                <div className="admin-user-info">
                    <span>Bun venit, {user.firstName} {user.lastName}</span>
                    <button onClick={logout} className="btn btn-secondary btn-sm">
                        Ieșire
                    </button>
                </div>
            </div>

            {loading && <div className="loading">Se încarcă...</div>}
            {error && <div className="error-message">{error}</div>}

            {/* Management Clienți */}
            <div className="clients-content">
                <div className="clients-header">
                    <h2>👤 Management Clienți</h2>
                </div>

                {/* Formular adăugare client */}
                <div className="add-vehicle-form">
                    <h3>➕ Adaugă Client Nou</h3>
                    <form onSubmit={handleAddClient}>
                        <div className="form-row">
                            <div className="form-group">
                                <label>Număr Înmatriculare:</label>
                                <input
                                    type="text"
                                    value={clientForm.nrInmatriculare}
                                    onChange={(e) => setClientForm({
                                        ...clientForm,
                                        nrInmatriculare: e.target.value.toUpperCase()
                                    })}
                                    placeholder="B123ABC"
                                    required
                                />
                            </div>
                            <div className="form-group">
                                <label>Număr Telefon:</label>
                                <input
                                    type="tel"
                                    value={clientForm.nrTelefon}
                                    onChange={(e) => setClientForm({
                                        ...clientForm,
                                        nrTelefon: e.target.value
                                    })}
                                    placeholder="0756596565"
                                    required
                                />
                            </div>
                        </div>
                        <div className="form-row">
                            <div className="form-group">
                                <label>Valabilitate:</label>
                                <select
                                    value={clientForm.valabilitate}
                                    onChange={(e) => handleValidityChange(e.target.value)}
                                    required
                                    title="Selectează perioada de validitate - opțiuni predefinite sunt limitate"
                                    className="validity-select-admin"
                                >
                                    <option value="6months" className="predefined-option">6 luni</option>
                                    <option value="1year" className="predefined-option">1 an</option>
                                    <option value="2years" className="predefined-option">2 ani</option>
                                    <option value="manual" className="manual-option">Manual (Deblocat)</option>
                                </select>
                            </div>
                            {manualDateEnabled && (
                                <div className="form-group">
                                    <label>Data Expirare Manuală:</label>
                                    <input
                                        type="date"
                                        value={clientForm.manualDate}
                                        onChange={(e) => setClientForm({
                                            ...clientForm,
                                            manualDate: e.target.value
                                        })}
                                        required={manualDateEnabled}
                                        title="Selectează data de expirare manuală"
                                        className="manual-date-input"
                                    />
                                </div>
                            )}
                            <div className="form-group">
                                <label>Câmp Opțional:</label>
                                <input
                                    type="text"
                                    value={clientForm.optional}
                                    onChange={(e) => setClientForm({
                                        ...clientForm,
                                        optional: e.target.value
                                    })}
                                    placeholder="Observații..."
                                />
                            </div>
                        </div>
                        <button type="submit" className="btn btn-primary">
                            ➕ Adaugă Client
                        </button>
                    </form>
                </div>

                {/* Lista clienți */}
                <div className="vehicles-list">
                    <h3>📋 Lista Clienți ({clients.length})</h3>
                    {clients.length === 0 ? (
                        <div className="no-vehicles">
                            <p>Nu există clienți înregistrați.</p>
                        </div>
                    ) : (
                        <div className="table-container">
                            <table className="vehicles-table">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Nr. Înmatriculare</th>
                                        <th>Nr. Telefon</th>
                                        <th>Valabilitate</th>
                                        <th>Opțional</th>
                                        <th>Data creării</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {clients.map((client, index) => (
                                        <tr key={client.id || index}>
                                            <td>{client.id || index + 1}</td>
                                            <td className="nr-inmatriculare">
                                                {client.nrInmatriculare}
                                            </td>
                                            <td>{client.nrTelefon}</td>
                                            <td>
                                                <span className={`validity ${client.valabilitate}`}>
                                                    {getValidityLabel(client.valabilitate)}
                                                </span>
                                            </td>
                                            <td>{client.optional || '-'}</td>
                                            <td>{formatDate(client.createdAt)}</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default AdminDashboard;